import numpy as np
from typing import List, Tuple, Union, Dict

def predict_speed_and_steering(scene_info: Dict, stopping_time_margin=2.0, 
                               reaction_time=1.0, stopping_speed=0.1, slow_speed=2.5, 
                               safety_margin=2.0, steer_gain=1.0) -> Tuple[str, float]:
    """
    Given the state of the scene, find the required speed level and turn angle of the ego vehicle.
    
    Args:
        scene_info (dict): Contains information about the scene.
        stopping_time_margin (float): Time margin to determine when to stop in seconds [default: 2.0]
        reaction_time (float): Time taken to react to external events in seconds [default: 1.0]
        stopping_speed (float): Minimum speed below which the vehicle should stop in m/s [default: 0.1]
        slow_speed (float): Speed at which the vehicle should slow down in m/s [default: 2.5]
        safety_margin (float): Safety margin in meters between the vehicle and other objects [default: 2.0]
        steer_gain (float): Proportional gain for steering control [default: 1.0]

    Returns:
        (str, float): A tuple containing the required speed level and turn angle of the ego vehicle.
                      The speed level can be "MOVE", "SLOW", or "STOP". The turn angle should be a float between -180 to 180 degrees.
    """

    # Step 1: Extract all the relevant parameters from the input dictionary.
    ego_location = np.array(scene_info['ego_location_world_coord'])
    ego_target_location = np.array(scene_info['ego_target_location_world_coord'])
    ego_orientation = np.array(scene_info['ego_orientation_unit_vector'])
    ego_forward_speed = scene_info['ego_forward_speed']
    ego_length = scene_info['ego_length']
    ego_width = scene_info['ego_width']
    vehicles = scene_info['vehicles']
    pedestrians = scene_info['pedestrians']
    distance_to_stop_sign = scene_info['distance_to_stop_sign']
    distance_to_red_light = scene_info['distance_to_red_light']

    # Step 2: Convert all coordinates for vehicles and pedestrians to relative coordinates in terms of the ego vehicle orientation.
    vehicles_rel = {}
    for k, v in vehicles.items():
        location = np.array(v['location_world_coord']) - ego_location
        orientation = np.array(v['orientation_unit_vector'])
        speed = v['forward_speed']
        length = v['forward_length'] + ego_length
        width = v['sideways_width'] + ego_width
        location_rel = np.dot(location, ego_orientation), np.dot([-ego_orientation[1], ego_orientation[0]], location)
        if location_rel[0] > 0:
            vehicles_rel[k] = {'location_rel': location_rel, 'speed': speed, 'length': length, 'width': width}

    pedestrians_rel = {}
    for k, v in pedestrians.items():
        location = np.array(v['location_world_coord']) - ego_location
        orientation = np.array(v['orientation_unit_vector'])
        speed = v['forward_speed']
        length = v['forward_length'] + ego_length
        width = v['sideways_width'] + ego_width
        location_rel = np.dot(location, ego_orientation), np.dot([-ego_orientation[1], ego_orientation[0]], location)
        if location_rel[0] > 0:
            pedestrians_rel[k] = {'location_rel': location_rel, 'speed': speed, 'length': length, 'width': width}

    # Step 3: Compute the Euclidean distance from the ego location to the target location.
    distance_to_target = np.linalg.norm(ego_target_location - ego_location)

    # Step 4: Calculate the threshold stopping and slow distance based on the current speed.
    stopping_distance = ego_forward_speed ** 2 / (2 * 0.4) + safety_margin + ego_length / 2
    slow_distance = slow_speed * (stopping_time_margin + reaction_time) + safety_margin + ego_length / 2

    # Step 5: Check if there is a stop sign or a red light and the distance is smaller than the stopping distance. If yes, initiate a stop action if the speed is greater than the stopping speed.
    if distance_to_stop_sign is not None and distance_to_stop_sign < stopping_distance:
        if ego_forward_speed <= stopping_speed:
            speed_level = "MOVE"
        else:
            stopping_speed_current = max(distance_to_stop_sign / 2, stopping_speed)
            if ego_forward_speed > stopping_speed_current:
                ego_forward_speed = stopping_speed_current
                speed_level = "STOP"
            else:
                speed_level = "MOVE"
    elif distance_to_red_light is not None and distance_to_red_light < stopping_distance:
        speed_level = "STOP"
    else:
        # Step 6: Check for vehicles and pedestrians in the field of view that are in the collision trajectory of the ego vehicle
        collision_vehicle = False
        collision_pedestrian = False
        min_longitudinal_distance = float('inf')
        min_lateral_distance = float('inf')
        for k, v in vehicles_rel.items():
            location_rel = v['location_rel']
            speed = v['speed']
            length = v['length']
            width = v['width']
            dx = location_rel[0] - ego_length / 2
            dy = location_rel[1] + (width - ego_width) / 2 if location_rel[1] > 0 else (location_rel[1] - (width - ego_width) / 2)
            other_min_speed = max(np.sqrt((2 * (dx + length / 2) * 0.4) + stopping_speed**2), stopping_speed)
            if speed > other_min_speed or ego_forward_speed > other_min_speed:
                min_longitudinal_distance = min(dx - length / 2 - safety_margin, min_longitudinal_distance)
                min_lateral_distance = np.minimum(np.abs(dy) - ego_width / 2 - width / 2, min_lateral_distance)
            else: 
                continue

        for k, v in pedestrians_rel.items():
            location_rel = v['location_rel']
            speed = v['speed']
            length = v['length']
            width = v['width']
            dx = location_rel[0] - ego_length / 2
            dy = location_rel[1] + (width - ego_width) / 2 if location_rel[1] > 0 else (location_rel[1] - (width - ego_width) / 2)
            if speed > np.sqrt((2 * (dx + length / 2) * 0.4) + stopping_speed**2) or ego_forward_speed > np.sqrt((2 * (dx + length / 2) * 0.4) + stopping_speed**2):
                min_longitudinal_distance = min(dx - length / 2 - safety_margin, min_longitudinal_distance)
                min_lateral_distance = np.minimum(np.abs(dy) - ego_width / 2 - width / 2, min_lateral_distance)
            else:
                continue

        # Step 7: Initiate a stop action if the ego vehicle is about to collide with a nearby vehicle or pedestrian; Initiate a slow action if the vehicles or pedestrian are within the slow margin
        if min_longitudinal_distance < stopping_distance - ego_width / 2 - safety_margin or min_lateral_distance < 0:
            speed_level = "STOP"

            # reset the speed to default minimum if the vehicle is already stopped
            if ego_forward_speed <= stopping_speed:
                ego_forward_speed = stopping_speed
            else:
                ego_forward_speed = max(min_longitudinal_distance - ego_length / 2 - safety_margin + stopping_speed / 2, stopping_speed)

        elif min_longitudinal_distance < slow_distance - ego_width / 2 - safety_margin or min_lateral_distance < ego_width:
            speed_level = "SLOW"
            if np.abs(min_lateral_distance) > 0 and np.abs(min_lateral_distance - ego_width) > 0:
                speed_factor = (min_longitudinal_distance - ego_length / 2 - safety_margin) / (slow_distance - ego_length / 2 - safety_margin)
                speed_factor = min(max(0.0, speed_factor), 1.0)
                ego_forward_speed = slow_speed * speed_factor + ego_forward_speed * (1 - speed_factor)
        else:
            speed_level = "MOVE"

    # Step 8: Compute the angle between the ego vehicle orientation and the vector pointing to the target in world coordinates.
    target_direction = ego_target_location - ego_location
    target_direction_ego = np.dot(target_direction, ego_orientation), np.dot([-ego_orientation[1], ego_orientation[0]], target_direction)

    # Step 9: Rotate the vector to the coordinate system of the ego vehicle, use Proportional control to calculate the turn angle, and return the angle.
    target_angle = np.arctan2(target_direction_ego[1], target_direction_ego[0]) * 180.0 / np.pi if np.linalg.norm(target_direction_ego) > 0 else 0.0
    target_angle = ((target_angle + 180) % 360) - 180
    turn_angle = steer_gain * target_angle

    return speed_level, turn_angle
