import numpy as np
from typing import List, Tuple, Union, Dict


def predict_speed_and_steering(scene_info: Dict) -> Tuple[str, float]:
    # Egovehicle and other object related information extraction
    ego_location = np.array(scene_info['ego_location_world_coord'])
    ego_target_location = np.array(scene_info['ego_target_location_world_coord'])
    ego_orientation = np.array(scene_info['ego_orientation_unit_vector'])
    ego_forward_speed = scene_info['ego_forward_speed']
    ego_length = scene_info['ego_length']
    ego_width = scene_info['ego_width']
    vehicles = scene_info['vehicles']
    pedestrians = scene_info['pedestrians']
    distance_to_stop_sign = scene_info['distance_to_stop_sign']
    distance_to_red_light = scene_info['distance_to_red_light']

    # Convert to relative coordinates
    vehicles_rel = {}
    for k, v in vehicles.items():
        location = np.array(v['location_world_coord']) - ego_location
        orientation = np.array(v['orientation_unit_vector'])
        speed = v['forward_speed']
        length = v['forward_length'] + ego_length
        width = v['sideways_width'] + ego_width
        location_rel = np.dot(location, ego_orientation), np.abs(np.dot([-ego_orientation[1], ego_orientation[0]], location))
        if location_rel[0] > 0:
            location_rel_rotated = (location_rel[0], np.sign(-location[1]) * location_rel[1])
            vehicles_rel[k] = {'location_rel': location_rel_rotated, 'speed': speed, 'length': length, 'width': width}

    pedestrians_rel = {}
    for k, v in pedestrians.items():
        location = np.array(v['location_world_coord']) - ego_location
        orientation = np.array(v['orientation_unit_vector'])
        speed = v['forward_speed']
        length = v['forward_length'] + ego_length
        width = v['sideways_width'] + ego_width
        location_rel = np.dot(location, ego_orientation), np.abs(np.dot([-ego_orientation[1], ego_orientation[0]], location))
        if location_rel[0] > 0:
            location_rel_rotated = (location_rel[0], np.sign(-location[1]) * location_rel[1])
            pedestrians_rel[k] = {'location_rel': location_rel_rotated, 'speed': speed, 'length': length, 'width': width}
            
    # Distance from current location to the target location
    distance_to_target = np.linalg.norm(ego_target_location - ego_location)

    # Threshold Stopping distance and threshold slow distance calculation based on the vehicle's current speed
    stopping_distance = (ego_forward_speed ** 2) / 8 + ego_length / 2
    slow_distance = 0.5 * (ego_forward_speed - 2.5) * 1 + 2 + ego_length / 2

    # Distance to stop sign is not None. If a stop sign exists and the distance to the sign is less than stopping distance.
    # Const date.py traffic rule "stop sign can be considered completed once the vehicle has slowed down to a max speed of 0.1 m/s, 
    # at which point we can resume moving."
    if distance_to_stop_sign is not None and distance_to_stop_sign < stopping_distance:
        if ego_forward_speed <= 0.1:
            speed_level = "MOVE"
        else:
            if ego_forward_speed >= 2:
                stopping_speed_current = max(distance_to_stop_sign / 2, 0.1)
            else:
                stopping_speed_current = ego_forward_speed
            if ego_forward_speed > stopping_speed_current:
                ego_forward_speed = stopping_speed_current
                speed_level = "STOP"
            else:
                speed_level = "MOVE"
                
    # Distance to red lights is not none. If a red light exists and the distance to the red light is less than stopping distance.
    elif distance_to_red_light is not None and distance_to_red_light < stopping_distance:
        speed_level = "STOP"
    
    else:
        collision_vehicle = False
        collision_pedestrian = False
        min_longitudinal_vehicle_distance = float('inf')
        min_lateral_vehicle_distance = float('inf')

        if len(vehicles_rel) == 0 and len(pedestrians_rel) == 0:
            speed_level = "MOVE"
        else:
            for k, v in vehicles_rel.items():
                location_rel = v['location_rel']
                speed = v['speed']
                length = v['length']
                width = v['width']
                longitudinal_distance = location_rel[0] - length / 2 - ego_length / 2

                # Check if there is a collision course with the ego vehicle.
                if np.abs(location_rel[1]) <= width / 2 + ego_width and longitudinal_distance <= stopping_distance + 2:
                    collision_vehicle = True
                
                # Compute the minimum longitudinal and lateral distances.
                if longitudinal_distance < stopping_distance and np.abs(location_rel[1]) <= width / 2 + ego_width:
                    if np.abs(speed - ego_forward_speed) < 0.5 and speed < ego_forward_speed:
                        continue
                    min_longitudinal_vehicle_distance = min(longitudinal_distance, min_longitudinal_vehicle_distance)
                    min_lateral_vehicle_distance = np.minimum(width / 2 + ego_width - np.abs(location_rel[1]), min_lateral_vehicle_distance)
            
            for k, v in pedestrians_rel.items():
                location_rel = v['location_rel']
                speed = v['speed']
                length = v['length']
                width = v['width']
                longitudinal_distance = location_rel[0] - length / 2 - ego_length / 2

                # Ignore locations behind the ego vehicle and the nearest location
                if np.abs(location_rel[1]) <= width / 2 + ego_width and longitudinal_distance <= stopping_distance + 2:
                    collision_pedestrian = True
                
                # Compute the minimum longitudinal and lateral distances.
                if longitudinal_distance < stopping_distance and np.abs(location_rel[1]) < width / 2 + ego_width:
                    if np.abs(speed - ego_forward_speed) < 0.5 and speed < ego_forward_speed:
                        continue
                    min_longitudinal_vehicle_distance = min(longitudinal_distance, min_longitudinal_vehicle_distance)
                    min_lateral_vehicle_distance = np.minimum(width / 2 + ego_width - np.abs(location_rel[1]), min_lateral_vehicle_distance)

            if collision_vehicle or min_longitudinal_vehicle_distance < -ego_width / 2 or min_lateral_vehicle_distance < 0:
                speed_level = "STOP"
            elif collision_pedestrian or min_longitudinal_vehicle_distance < stopping_distance + 2 or min_lateral_vehicle_distance < ego_width:
                # Compute the speed factor to reduce the speed
                speed_factor = np.min([(min_longitudinal_vehicle_distance+2-ego_length/2-stopping_distance)/2, 1])
                
                # Check the desired speed to the current speed of the vehicle.
                if speed_factor < 0.05:
                    speed_level = "STOP"
                elif speed_factor < 1:
                    speed_level = "SLOW"
                    ego_forward_speed = min(max(2.5 * speed_factor, 0.1), ego_forward_speed)
                else:
                    speed_level = "MOVE"
            else:
                speed_level = "MOVE"

    target_direction = ego_target_location - ego_location
    target_direction_ego = np.dot(target_direction, ego_orientation), np.dot([-ego_orientation[1], ego_orientation[0]], target_direction)
    target_angle = np.arctan2(target_direction_ego[1], target_direction_ego[0]) * 180.0 / np.pi if np.linalg.norm(target_direction_ego) > 0 else 0.0
    target_angle = ((target_angle + 180) % 360) - 180

    # Return computed angle and action
    return speed_level, target_angle

    
