import numpy as np
from typing import Union

def predict_speed_and_steering(scene_info: dict) -> tuple:
    """Predicts the speed level and turn angle for a self-driving car in a given scene

    Args:
        scene_info (dict): Contains all information about the current scene including information about
        the ego vehicle, nearby vehicles and pedestrians, target location, and distances to stop signs or traffic lights.

    Returns:
        Speed level of the ego vehicle and the turn angle in the ego vehicle frame.
    """

    # Define all constants to be used in the function.
    SAFE_WIDTH_MARGIN = 0.25  # in meters
    STOP_MARGIN = 2  # in meters
    SLOW_MARGIN = 5  # in seconds
    TIME_THRESHOLD = 2  # in seconds
    ACCELERATION = 3  # in m/s^2
    MIN_STOP_SPEED = 0.1  # in m/s
    
    # Convert all coordinates into relative ego vehicle coordinate system.
    def to_relative_coor(point):
        relative_point = point - ego_loc
        yaw = np.arctan2(ego_vec[1], ego_vec[0])
        rotation_matrix = np.array([[np.cos(yaw), -np.sin(yaw)], [np.sin(yaw), np.cos(yaw)]])
        relative_point = np.dot(rotation_matrix, relative_point)
        return relative_point

    ego_loc = np.array(scene_info["ego_location_world_coord"])
    ego_tgt = np.array(scene_info["ego_target_location_world_coord"])
    ego_vec = np.array(scene_info["ego_orientation_unit_vector"])
    ego_speed = scene_info["ego_forward_speed"]
    ego_len = scene_info["ego_length"]
    ego_wid = scene_info["ego_width"]

    rel_vehicles, rel_pedestrians = [], []

    # Convert nearby vehicles to relative coordinates and check if they are on the ego vehicle's path.
    for vehicle_id, vehicle in scene_info["vehicles"].items():
        veh_loc = to_relative_coor(np.array(vehicle["location_world_coord"]))
        veh_vec = np.array(vehicle["orientation_unit_vector"])
        veh_speed = vehicle["forward_speed"]
        veh_speed_rel = (veh_speed * np.cos(np.arctan2(veh_vec[1], veh_vec[0]) - np.arctan2(ego_vec[1], ego_vec[0])) - ego_speed)
        veh_len = vehicle["forward_length"]
        veh_wid = vehicle["sideways_width"]
        distance_rel = veh_loc[0]

        # Estimate the stopping distance and stopping time for the vehicle.
        stopping_distance_vehicle = (veh_speed_rel ** 2) / (2 * ACCELERATION) + veh_wid / 2 + ego_wid / 2 + STOP_MARGIN
        stopping_time_vehicle = veh_speed_rel / ACCELERATION

        # Perform a detailed check of the relative distance between the ego vehicle and the other vehicle.
        if abs(veh_loc[1]) > (ego_wid + veh_wid) / 2 + SAFE_WIDTH_MARGIN:
            continue
        angle_vehicle = np.arctan2(veh_loc[1], veh_loc[0])
        if angle_vehicle > np.pi / 2 or angle_vehicle < -np.pi / 2:
            continue
        if veh_speed_rel > 0 and distance_rel <= stopping_distance_vehicle:
            rel_vehicles.append({
                "yaw": np.arctan2(veh_loc[1], distance_rel + 1e-5),
                "vel_rel": veh_speed_rel,
                "distance_rel": distance_rel,
                "stopping_distance": stopping_distance_vehicle,
                "stopping_time": stopping_time_vehicle
            })
        elif veh_speed_rel <= 0 and distance_rel <= ego_wid and abs(veh_loc[1]) <= (ego_wid + veh_wid) / 2:
            rel_vehicles.append({
                "yaw": np.arctan2(veh_loc[1], distance_rel + 1e-5),
                "vel_rel": veh_speed_rel,
                "distance_rel": distance_rel,
                "stopping_distance": 0.0,
                "stopping_time": 2 * STOP_MARGIN / ego_speed
            })

    # Convert nearby pedestrians to relative coordinates and check if they are on the ego vehicle's path.
    for ped_id, pedestrian in scene_info["pedestrians"].items():
        ped_loc = to_relative_coor(np.array(pedestrian["location_world_coord"]))
        ped_speed = pedestrian["forward_speed"]
        ped_speed_rel = ped_speed * np.cos(np.arctan2(pedestrian["orientation_unit_vector"][1], pedestrian["orientation_unit_vector"][0]) - np.arctan2(ego_vec[1], ego_vec[0])) - ego_speed

        ped_length = pedestrian["forward_length"]
        ped_width = pedestrian["sideways_width"]
        distance_rel = ped_loc[0]

        # Estimate the stopping distance and stopping time for the pedestrian.
        stopping_distance_pedestrian = (ped_speed_rel ** 2) / (2 * ACCELERATION) + ped_width / 2 + ego_wid / 2 + STOP_MARGIN
        stopping_time_pedestrian = ped_speed_rel / ACCELERATION

        # Perform a detailed check of the relative distance between the ego vehicle and the pedestrian.
        if abs(ped_loc[1]) > (ego_wid + ped_width) / 2 + SAFE_WIDTH_MARGIN:
            continue
        angle_pedestrian = np.arctan2(ped_loc[1], ped_loc[0])
        if angle_pedestrian > np.pi / 2 or angle_pedestrian < -np.pi / 2:
            continue
        ped_speed_diff = ped_speed_rel
        if ped_speed_diff < 0:
            continue
        if distance_rel <= ego_wid and abs(ped_loc[1]) <= (ego_wid + ped_width) / 2:
            if ped_speed_rel == 0 or distance_rel <= stopping_distance_pedestrian:
                rel_pedestrians.append({
                    "yaw": np.arctan2(ped_loc[1], distance_rel + 1e-5),
                    "vel_rel": ped_speed_diff,
                    "distance_rel": distance_rel,
                    "stopping_distance": stopping_distance_pedestrian,
                    "stopping_time": stopping_time_pedestrian + TIME_THRESHOLD  # add time threshold for pedestrians
                })

    # Calculate the stopping distance and time of the ego vehicle.
    stopping_distance_ego = (ego_speed ** 2) / (2 * ACCELERATION) + ego_wid / 2 + ego_len / 2 + STOP_MARGIN
    stopping_time_ego = ego_speed / ACCELERATION

    # Stop the vehicle if it is already at its destination or is stationary.
    if np.linalg.norm(ego_tgt - ego_loc) == 0 or ego_speed < 1e-3:
        speed_level = "STOP"
    else:
        # Define the default speed level to be "MOVE".
        speed_level = "MOVE"

        # Check for obstacles in front of the ego vehicle.
        for actor in rel_vehicles + rel_pedestrians:
            yaw = actor["yaw"]
            vel_rel = actor["vel_rel"]
            distance_rel = actor["distance_rel"] - ego_wid / 2 - SAFE_WIDTH_MARGIN
            stopping_distance_actor = actor["stopping_distance"]
            stopping_time_actor = actor["stopping_time"]
            if distance_rel > stopping_distance_actor:
                continue

            if yaw > np.pi / 2 or yaw < -np.pi / 2:
                continue

            if yaw >= -np.pi / 2 and yaw <= 0 and vel_rel < 0:
                continue

            # Calculate the stopping time threshold if the obstacle is a vehicle.
            if actor in rel_vehicles:
                stopping_time_threshold = stopping_time_actor + stopping_time_ego + TIME_THRESHOLD
            else:
                stopping_time_threshold = stopping_time_actor

            # Stop the vehicle if an obstacle is on a collision course in the next stopping time threshold.
            # If the pedestrian or vehicle is on a collision course after slowing down, add a safe distance margin.
            if stopping_time_threshold >= stopping_time_actor:
                if actor["distance_rel"] <= stopping_distance_actor + STOP_MARGIN:
                    speed_level = "STOP"
                    break
                elif speed_level != "STOP" and actor["vel_rel"] < MIN_STOP_SPEED and actor == rel_pedestrians:
                    if scene_info["distance_to_red_light"] is not None and distance_rel < max(scene_info["distance_to_red_light"] + 0.3, 0):
                        speed_level = "STOP"
                        break
                    elif scene_info["distance_to_stop_sign"] is not None and distance_rel < max(scene_info["distance_to_stop_sign"] + 0.3, 0):
                        speed_level = "STOP"
                        break
                else:
                    speed_level = "SLOW"
                    if actor == rel_pedestrians:
                        stopping_time_actor += TIME_THRESHOLD
                    stopping_distance_actor = (vel_rel * stopping_time_actor) / 2 + ego_wid / 2 + actor["stopping_distance"] / 2 + STOP_MARGIN
                    if distance_rel <= stopping_distance_actor and stopping_time_threshold >= stopping_time_actor:
                        speed_level = "STOP"
                        break

        # Slow down or stop if there is a stop sign or red traffic light in front of the ego vehicle.
        if speed_level != "STOP":
            if scene_info["distance_to_stop_sign"] is not None and scene_info["distance_to_stop_sign"] <= stopping_distance_ego + STOP_MARGIN + ego_len and scene_info["distance_to_stop_sign"] >= 0:
                if ego_speed > MIN_STOP_SPEED:
                    speed_level = "SLOW"
                else:
                    speed_level = "STOP"
            elif scene_info["distance_to_red_light"] is not None and scene_info["distance_to_red_light"] <= stopping_distance_ego + STOP_MARGIN + ego_len and scene_info["distance_to_red_light"] >= 0:
                if ego_speed > MIN_STOP_SPEED:
                    speed_level = "SLOW"
                else:
                    speed_level = "STOP"

    # Compute the target direction vector and determine the angle to the target relative the the ego vehicle's orientation.
    target_dir_vec = ego_tgt - ego_loc
    if np.linalg.norm(target_dir_vec) == 0:
        turn_angle = 0
    else:
        target_dir_vec_ego_frame = np.array([np.dot(target_dir_vec, ego_vec), np.dot(target_dir_vec, np.array([-ego_vec[1], ego_vec[0]]))])
        turn_angle = np.arctan2(target_dir_vec_ego_frame[1], target_dir_vec_ego_frame[0]) * 180 / np.pi
        if turn_angle > 180:
            turn_angle -= 360
        elif turn_angle < -180:
            turn_angle += 360
    return speed_level, turn_angle
