from typing import Union
import numpy as np


def predict_speed_and_steering(scene_info: dict) -> tuple:
    """
    Given a dictionary of objects in the scene, returns either "MOVE", "SLOW", or "STOP" for the speed level, depending on
    how fast the vehicle should move, as well as the ego vehicle turn angle to reach the target location.

    Args:
        - scene_info: dict
            Contains the following information:
                {
                    "ego_location_world_coord": np.ndarray,         # numpy array of shape (2,) which contains (x, y) of the center location of the ego vehicle in world coordinates given in [m]
                    "ego_target_location_world_coord": np.ndarray,  # numpy array of shape (2,) which contains (x, y) of the target location of the ego vehicle in world coordinates given in [m]
                    "ego_orientation_unit_vector": np.ndarray,      # numpy array of shape (2,) which contains (x, y) of unit vector orientation of the ego vehicle in world coordinates. The vehicle moves in the direction of the orientation.
                    "ego_forward_speed": float,                     # the speed of the ego vehicle given in [m/s].
                    "ego_length": float,                            # length of the ego vehicle in the orientation direction, given in [m/s].
                    "ego_width": float,                             # width of the ego vehicle perpendicular to the orientation direction, given in [m].
                    "distance_to_red_light": Union[float, None],    # distance to red light given in [m]. None if no traffic lights are affecting the ego vehicle
                    "distance_to_stop_sign": Union[float, None],    # distance to stop sign given in [m]. None if no stop signs are affecting the ego vehicle
                    "vehicles": {                       # dictionary of nearby vehicles
                        <vehicle_id: int>:  {
                            "location_world_coord": np.ndarray,     # numpy array of shape (2,) which contains (x, y) of the center location of vehicle <vehicle_id> in world coordinates given in [m]
                            "orientation_unit_vector": np.ndarray,  # numpy array of shape (2,) which contains (x, y) of unit vector orientation of vehicle <vehicle_id> in world coordinates. The vehicle moves in the direction of the orientation.
                            "forward_speed": float,                 # speed of vehicle <vehicle_id> given in [m/s].
                            "forward_length": float,                # length of the vehicle <vehicle_id> along the orientation direction, given in [m].
                            "sideways_width": float,                # width of the vehicle <vehicle_id> perpendicular to the orientation direction, given in [m].
                        },
                    },
                    "pedestrians": {                    # dictionary of nearby pedestrians
                        <pedestrian_id: int>:  {
                            "location_world_coord": np.ndarray,     # numpy array of shape (2,) which contains (x, y) of the center location of pedestrian <pedestrian_id> in world coordinates given in [m]
                            "orientation_unit_vector": np.ndarray,  # numpy array of shape (2,) which contains (x, y) of unit vector orientation of pedestrian <pedestrian_id> in world coordinates. The vehicle moves in the direction of the orientation.
                            "forward_speed": float,                 # speed of pedestrian <pedestrian_id> relative to the orientation given in [m/s].
                            "forward_length": float,                # length of the pedestrian <pedestrian_id> along the orientation direction, given in [m].
                            "sideways_width": float,                # width of the pedestrian <pedestrian_id> perpendicular to the orientation direction, given in [m].
                        },
                    }
                }

    Returns:
        - speed_level: str          # Choose from ("MOVE", "SLOW", "STOP").
        - turn_angle: float         # Predicted turn angle of the ego vehicle to reach the target waypoint in [degrees].
    """
    # Constants used in the function
    SAFE_WIDTH_MARGIN = 0.25  # in meters
    STOP_MARGIN = 2  # in meters
    SLOW_MARGIN = 5  # in seconds
    TIME_THRESHOLD = 2  # in seconds
    ACCELERATION = 3  # in m/s^2

    # Convert all coordinates into relative ego vehicle coordinate system
    ego_loc = np.array(scene_info["ego_location_world_coord"])
    ego_tgt = np.array(scene_info["ego_target_location_world_coord"])
    ego_vec = np.array(scene_info["ego_orientation_unit_vector"])
    ego_speed = scene_info["ego_forward_speed"]
    ego_len = scene_info["ego_length"]
    ego_wid = scene_info["ego_width"]

    def to_relative_coor(point):
        relative_point = point - ego_loc
        yaw = np.arctan2(ego_vec[1], ego_vec[0])
        rotation_matrix = np.array([[np.cos(yaw), -np.sin(yaw)], [np.sin(yaw), np.cos(yaw)]])
        relative_point = np.dot(rotation_matrix, relative_point)
        return relative_point

    rel_vehicles_dist = []
    closest_vehicle_dist = np.inf
    for vehicle_id, vehicle in scene_info["vehicles"].items():
        veh_loc = to_relative_coor(np.array(vehicle["location_world_coord"]))
        veh_vec = np.array(vehicle["orientation_unit_vector"])
        veh_speed = vehicle["forward_speed"]
        veh_speed_rel = (veh_speed * np.cos(np.arctan2(veh_vec[1], veh_vec[0]) - np.arctan2(ego_vec[1], ego_vec[0])) - ego_speed)
        veh_len = vehicle["forward_length"]
        veh_wid = vehicle["sideways_width"]
        # Calculate the distance from the vehicle to the ego vehicle
        distance_rel = veh_loc[0]

        stopping_distance_vehicle = (veh_speed_rel ** 2) / (2 * ACCELERATION) + veh_wid / 2 + ego_wid / 2 + STOP_MARGIN
        stopping_time_vehicle = veh_speed_rel / ACCELERATION

        # Perform a detailed check for the relative distance between the ego vehicle and the other vehicle
        if abs(veh_loc[1]) > (ego_wid + veh_wid) / 2 + SAFE_WIDTH_MARGIN:
            continue
        angle_vehicle = np.arctan2(veh_loc[1], veh_loc[0])
        if angle_vehicle > np.pi / 2 or angle_vehicle < -np.pi / 2 or veh_speed_rel < 0:
            continue
        if 0 < veh_loc[1] <= ego_wid / 2 + veh_wid / 2 and distance_rel <= stopping_distance_vehicle:
            rel_vehicles_dist.append(distance_rel)
            closest_vehicle_dist = min(closest_vehicle_dist, distance_rel)

    rel_pedestrians_dist = []
    closest_pedestrian_dist = np.inf
    for ped_id, pedestrian in scene_info["pedestrians"].items():
        ped_loc = to_relative_coor(np.array(pedestrian["location_world_coord"]))
        ped_speed = pedestrian["forward_speed"]
        ped_speed_rel = ped_speed * np.cos(np.arctan2(pedestrian["orientation_unit_vector"][1], pedestrian["orientation_unit_vector"][0]) - np.arctan2(ego_vec[1], ego_vec[0])) - ego_speed

        ped_length = pedestrian["forward_length"]
        ped_width = pedestrian["sideways_width"]
        # Calculate the distance from the pedestrian to the ego vehicle
        distance_rel = ped_loc[0]

        stopping_distance_pedestrian = (ped_speed_rel ** 2) / (2 * ACCELERATION) + ped_width / 2 + ego_wid / 2 + STOP_MARGIN
        stopping_time_pedestrian = ped_speed_rel / ACCELERATION

        # Perform a detailed check for the relative distance between the ego vehicle and the pedestrian
        if abs(ped_loc[1]) > (ego_wid + ped_width) / 2 + SAFE_WIDTH_MARGIN:
            continue
        angle_pedestrian = np.arctan2(ped_loc[1], ped_loc[0])
        if angle_pedestrian > np.pi / 2 or angle_pedestrian < -np.pi / 2 or ped_speed_rel < 0:
            continue

        # If the pedestrian is in the same lane as the ego vehicle and is in the collision course of the ego vehicle
        if 0 < ped_loc[1] <= ego_wid / 2 + ped_width / 2 and distance_rel <= stopping_distance_pedestrian:
            rel_pedestrians_dist.append(distance_rel)
            closest_pedestrian_dist = min(closest_pedestrian_dist, distance_rel)

    # Calculate the stopping distance and time of the ego vehicle
    stopping_distance_ego = (ego_speed ** 2) / (2 * ACCELERATION) + ego_wid / 2 + ego_len / 2 + STOP_MARGIN

    # Check if the ego vehicle is already at its destination or stopped
    if np.linalg.norm(ego_tgt - ego_loc) == 0 or ego_speed < 1e-3:
        speed_level = "STOP"
    else:
        # Determine the closest distance to any object in the front
        if closest_vehicle_dist <= stopping_distance_ego + ego_len:
            speed_level = "STOP"
        elif closest_pedestrian_dist <= stopping_distance_ego:
            speed_level = "STOP"
        elif closest_vehicle_dist <= SLOW_MARGIN * ego_speed:
            speed_level = "SLOW"
        else:
            speed_level = "MOVE"

        # Check if there is a stop sign or red traffic light
        if speed_level != "STOP":
            if scene_info["distance_to_stop_sign"] is not None and scene_info["distance_to_stop_sign"] <= stopping_distance_ego + STOP_MARGIN + ego_len:
                if ego_speed > 0.1:
                    speed_level = "SLOW"
                elif ego_speed < 0.1:
                    speed_level = "MOVE"
                else:
                    speed_level = "STOP"
            elif scene_info["distance_to_red_light"] is not None and scene_info["distance_to_red_light"] <= stopping_distance_ego + STOP_MARGIN + ego_len:
                if ego_speed > 0.1:
                    speed_level = "SLOW"
                elif ego_speed < 0.1:
                    speed_level = "MOVE"
                else:
                    speed_level = "STOP"

    # Compute the target direction vector and then determine the angle to the target.
    target_dir_vec = ego_tgt - ego_loc
    if np.linalg.norm(target_dir_vec) == 0:
        return speed_level, 0

    target_dir_vec_ego_frame = np.array([np.dot(target_dir_vec, ego_vec), np.dot(target_dir_vec, np.array([-ego_vec[1], ego_vec[0]]))])
    turn_angle = np.arctan2(target_dir_vec_ego_frame[1], target_dir_vec_ego_frame[0]) * 180 / np.pi

    if turn_angle > 180:
        turn_angle -= 360
    elif turn_angle < -180:
        turn_angle += 360

    return speed_level, turn_angle

