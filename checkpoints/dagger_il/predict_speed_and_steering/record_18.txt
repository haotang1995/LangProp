# Import required libraries
import numpy as np
from typing import Dict, Tuple, Union

def predict_speed_and_steering(scene_info: Dict) -> Tuple[str, float]:
    """
    Given a dictionary of objects in the scene, returns either "MOVE", "SLOW", or "STOP" for the speed level,
    depending on how fast the vehicle should move, as well as the ego vehicle turn angle to reach the target location.
    Return "STOP" if the agent needs to stop completely and immediately because there is a red traffic light,
    vehicles or pedestrians immediately in front of the vehicle so that the vehicle cannot move without collisions.
    Return "SLOW" if the agent doesn't need to stop immediately but should slow down either because there are
    vehicles or pedestrians in collision course if the vehicle kept moving, or if there is a red traffic light
    or uncompleted stop signs ahead that is affecting the vehicle.
    Return "MOVE" if the agent doesn't need to stop or slow. The agent should be moving by default.
    Both the ego location and the target location are given in world coordinates.
    The turn angle should be returned in the ego vehicle frame (i.e. relative to the ego vehicle's forward direction).

    Args:
        - scene_info: dict
            Contains the following information:
                {
                    "ego_location_world_coord": np.ndarray,         # numpy array of shape (2,) which contains (x, y) of the center location of the ego vehicle in world coordinates given in [m]
                    "ego_target_location_world_coord": np.ndarray,  # numpy array of shape (2,) which contains (x, y) of the target location of the ego vehicle in world coordinates given in [m]
                    "ego_orientation_unit_vector": np.ndarray,      # numpy array of shape (2,) which contains (x, y) of unit vector orientation of the ego vehicle in world coordinates.
                                                                        The vehicle moves in the direction of the orientation.
                    "ego_forward_speed": float,                     # the speed of the ego vehicle given in [m/s].
                    "ego_length": float,                            # length of the ego vehicle in the forward direction, given in [m].
                    "ego_width": float,                             # width of the ego vehicle perpendicular to the forward direction, given in [m].
                    "distance_to_red_light": Union[float, None],    # distance to red light given in [m]. None if no traffic lights are affecting the ego vehicle.
                    "distance_to_stop_sign": Union[float, None],    # distance to stop sign given in [m]. None if no stop signs are affecting the ego vehicle.
                    "vehicles": {                       # dictionary of nearby vehicles
                        <vehicle_id: int>:  {
                            "location_world_coord": np.ndarray,    # numpy array of shape (2,) which contains (x, y) of the center location of vehicle <vehicle_id> in world coordinates given in [m]
                            "orientation_unit_vector": np.ndarray, # numpy array of shape (2,) which contains (x, y) of unit vector orientation of vehicle <vehicle_id> in world coordinates. The vehicle moves in the direction of the orientation.
                            "forward_speed": float,                # speed of vehicle <vehicle_id> given in [m/s].
                            "forward_length": float,               # length of the vehicle <vehicle_id> along ego_vehicle direction, given in [m].
                            "sideways_width": float,               # width of the vehicle <vehicle_id> perpendicular to the ego_vehicle direction, given in [m].
                        },
                    },
                    "pedestrians": {                    # dictionary of nearby pedestrians
                        <pedestrian_id: int>:  {
                            "location_world_coord": np.ndarray,    # numpy array of shape (2,) which contains (x, y) of the center location of pedestrian <pedestrian_id> in world coordinates given in [m]
                            "orientation_unit_vector": np.ndarray, # numpy array of shape (2,) which contains (x, y) of unit vector orientation of pedestrian <pedestrian_id> in world coordinates. The vehicle moves in the direction of the orientation.
                            "forward_speed": float,                # speed of pedestrian <pedestrian_id> relative to ego_vehicle direction given in [m/s].
                            "forward_length": float,               # length of the pedestrian <pedestrian_id> along ego_vehicle direction, given in [m].
                            "sideways_width": float,               # width of the pedestrian <pedestrian_id> perpendicular to the ego_vehicle direction, given in [m].
                        },
                    }
                }

        Returns:
            - speed_level: str          # Choose from ("MOVE", "SLOW", "STOP").
            - turn_angle: float         # Predicted turn angle of the ego vehicle to reach the target waypoint in [degrees]. The range should be between -180 to 180 degrees
    """

    # Constants
    EGO_VEHICLE_SPEED_THRESHOLD = 0.1      # Threshold speed for ego vehicle below which it will move even if there is an uncompleted stop sign
    SAFETY_TIME_MARGIN = 2.0               # Safety time margin to stop the ego_vehicle
    SAFETY_LENGTH_MARGIN = 2.0             # Safety length margin to stop the ego_vehicle
    DEFAULT_VEHICLE_SPEED = 6.0            # Standard vehicle speed when it is moving

    # Extract ego vehicle information
    ego_location = scene_info["ego_location_world_coord"]
    ego_target_location = scene_info["ego_target_location_world_coord"]
    ego_orientation = scene_info["ego_orientation_unit_vector"]
    ego_speed = scene_info["ego_forward_speed"]
    ego_length = scene_info["ego_length"]
    ego_width = scene_info["ego_width"]
    ego_forward_direction = ego_orientation / np.linalg.norm(ego_orientation)

    # Convert the coordinates and orientation of other actors to relative position and orientation
    actors = {}
    for actor_id, actor in {**scene_info["vehicles"], **scene_info["pedestrians"]}.items():
        relative_location = actor["location_world_coord"] - ego_location
        relative_orientation = np.dot(actor["orientation_unit_vector"], np.array([ego_forward_direction, np.array([-ego_forward_direction[1], ego_forward_direction[0]])]).T)
        forward_speed = np.dot(actor["forward_speed"] * actor["orientation_unit_vector"], ego_forward_direction)  # speed of the actor along the ego_vehicle direction
        actors[actor_id] = {"location": relative_location, "orientation": relative_orientation,
                             "speed": forward_speed, "length": actor["forward_length"], "width": actor["sideways_width"]}

    # Calculate the distance to the target location and the turn angle in the ego vehicle frame
    relative_target_loc = ego_target_location - ego_location
    relative_heading = np.arctan2(ego_forward_direction[1], ego_forward_direction[0])
    target_heading = np.arctan2(relative_target_loc[1], relative_target_loc[0])
    turn_angle = np.rad2deg((target_heading - relative_heading + np.pi) % (2 * np.pi) - np.pi)

    # Compute the distance to the target location
    distance_to_target = np.sqrt(relative_target_loc[0] ** 2 + relative_target_loc[1] ** 2)

    # Find the object that ego vehicle can collide with and determine the collision distance
    closest_collision_distance = float("inf")
    closest_collision_id = None
    for actor_id, actor in actors.items():
        # Calculate the range of the actor from the center of the ego vehicle in the forward and lateral directions
        forward_distance = np.dot(actor["location"], ego_forward_direction)
        lateral_distance = np.abs(np.dot(actor["location"], np.array([-ego_forward_direction[1], ego_forward_direction[0]])))
        # If the other object is not in the collision course, we can safely neglect it
        if forward_distance <= 0 or lateral_distance > (actor["width"] + ego_width) / 2 or actor["length"] > np.sqrt(np.abs(forward_distance ** 2 + lateral_distance ** 2 + ego_width ** 2)) + ego_length / 2:
            continue
        # Calculate the collision distance of the actor from the ego vehicle along the ego_vehicle-direction
        collision_distance = np.sqrt(np.abs(forward_distance ** 2 + lateral_distance ** 2 + ego_width ** 2)) - (actor["length"] / 2 + ego_length / 2 + SAFETY_LENGTH_MARGIN)
        # If the other actor is not in collision course, update the closest_collision_distance and continue to the next actor
        if collision_distance >= (SAFETY_TIME_MARGIN * ego_speed + ego_width / 2 + SAFETY_LENGTH_MARGIN):
            continue
        # If there is a chance of collision, update the closest_collision_distance with the minimum value for all of the actors within the collision course of the ego vehicle
        if collision_distance < closest_collision_distance:
            closest_collision_distance = collision_distance
            closest_collision_id = actor_id

    # If there is an actor within the collision course of the ego vehicle, set the speed level to "SLOW" or "STOP" based on the collision distance and ego vehicle speed
    if closest_collision_distance <= (SAFETY_TIME_MARGIN * ego_speed + ego_width / 2 + SAFETY_LENGTH_MARGIN):
        collision_distance = closest_collision_distance - ego_width / 2 - SAFETY_LENGTH_MARGIN - actors[closest_collision_id]["width"] / 2
        if collision_distance <= 0:
            speed_level = "STOP"
        elif collision_distance <= max(ego_speed ** 2 / (2 * SAFETY_LENGTH_MARGIN), SAFETY_TIME_MARGIN * ego_speed) or actors[closest_collision_id]["speed"] >= ego_speed:
            speed_level = "SLOW"
        else:
            if ego_speed <= EGO_VEHICLE_SPEED_THRESHOLD:
                speed_level = "STOP"
            elif np.abs(target_heading - relative_heading) > np.pi / 4:
                speed_level = "STOP"
            elif target_heading == relative_heading:
                speed_level = "MOVE"
            else:
                speed_level = "SLOW"
    # Check if there is a red traffic light or uncompleted stop sign and whether the distance to it is less than or equal to 2 seconds of the current speed of the vehicle, plus a safety margin of 2 meters
    elif scene_info.get("distance_to_red_light", None) is not None and scene_info["distance_to_red_light"] <= (SAFETY_TIME_MARGIN * ego_speed + SAFETY_LENGTH_MARGIN):
        if np.abs(target_heading - relative_heading) > np.pi / 4:
            speed_level = "STOP"
        elif ego_speed <= EGO_VEHICLE_SPEED_THRESHOLD or (scene_info["distance_to_stop_sign"] is not None and scene_info["distance_to_stop_sign"] <= 0 and ego_speed < 0.1):
            speed_level = "STOP"
        elif target_heading == relative_heading:
            speed_level = "MOVE"
        else:
            speed_level = "SLOW"
    elif scene_info.get("distance_to_stop_sign", None) is not None and scene_info["distance_to_stop_sign"] <= (SAFETY_TIME_MARGIN * ego_speed + SAFETY_LENGTH_MARGIN):
        # Calculate the distance to the stop sign
        stop_distance = scene_info["distance_to_stop_sign"] - SAFETY_LENGTH_MARGIN
        # If the stop sign has already been reached or we have already slowed down, continue to MOVE
        if stop_distance <= 0.0 or (ego_speed <= EGO_VEHICLE_SPEED_THRESHOLD and stop_distance <= 2.0 * ego_width):
            speed_level = "MOVE"
        # If the stop sign is close, slow down
        elif stop_distance <= SAFETY_TIME_MARGIN * ego_speed / 2:
            speed_level = "SLOW"
        # Otherwise, adjust speed based on the time to stop sign
        else:
            time_to_stop_sign = stop_distance / max(ego_speed, 0.1)
            if np.isclose(time_to_stop_sign, 0.0):
                adjusted_speed = 0.0
            else:
                adjusted_speed = stop_distance / (time_to_stop_sign + SAFETY_TIME_MARGIN / 2)
            if adjusted_speed <= 0.1:
                speed_level = "STOP"
            elif np.abs(target_heading - relative_heading) > np.pi / 4:
                speed_level = "STOP"
            elif target_heading == relative_heading:
                speed_level = "MOVE"
            else:
                speed_level = "SLOW"
    # If there are no constraints, move the ego vehicle towards the target location
    else:
        speed_level = "MOVE"
        # Check if the target location has already been reached
        if distance_to_target <= ego_speed * 0.1:
            speed_level = "STOP"
        # Adjust the speed if there are other actors on the road
        elif closest_collision_id is not None and closest_collision_distance <= SAFETY_TIME_MARGIN * ego_speed + SAFETY_LENGTH_MARGIN + ego_width / 2:
            speed_level = "SLOW"
        # Adjust the speed if the target angle is not straight ahead
        elif np.abs(turn_angle) > 45:
            speed_level = "SLOW"

    # Choose default speed based on the speed level
    if speed_level == "MOVE":
        ego_speed = min(ego_speed + 1.0, DEFAULT_VEHICLE_SPEED)
    elif speed_level == "SLOW":
        ego_speed = max(ego_speed - 1.0, 0.0)
    elif speed_level == "STOP":
        ego_speed = 0.0

    # Shorten the remaining distance to the target location including the length of the ego vehicle
    ego_location += ego_forward_direction * ego_speed * 0.1

    return speed_level, turn_angle
