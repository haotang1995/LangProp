import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import gym

class DQNAgent(nn.Module):
    def __init__(self, input_size, output_size):
        super(DQNAgent, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 128)
        self.fc3 = nn.Linear(128, output_size)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

class ReplayBuffer():
    def __init__(self, capacity):
        self.capacity = capacity
        self.buffer = []
        self.position = 0

    def push(self, state, action, reward, next_state, done):
        if len(self.buffer) < self.capacity:
            self.buffer.append(None)
        self.buffer[self.position] = (state, action, reward, next_state, done)
        self.position = (self.position + 1) % self.capacity

    def sample(self, batch_size):
        batch = zip(*random.sample(self.buffer, batch_size))
        return map(lambda x: torch.cat(x, dim=0), batch)

    def __len__(self):
        return len(self.buffer)

def choose_action(state, epsilon):
    if np.random.uniform() < epsilon:
        return torch.tensor([[env.action_space.sample()]], dtype=torch.long)
    else:
        return torch.argmax(q_network(state), dim=1).unsqueeze(1)

def train(q_network, target_network, optimizer, replay_buffer, batch_size, gamma):
    if len(replay_buffer) < batch_size:
        return
    states, actions, rewards, next_states, dones = replay_buffer.sample(batch_size)
    q_values = q_network(states).gather(1, actions)
    next_q_values = target_network(next_states).max(dim=1, keepdim=True)[0].detach()
    expected_q_values = gamma * next_q_values * (1 - dones) + rewards

    loss = F.smooth_l1_loss(q_values, expected_q_values)

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

def update_target_network(q_network, target_network):
    target_network.load_state_dict(q_network.state_dict())

def solve_cartpole(cart_position, cart_velocity, pole_angle, pole_angular_velocity, env, q_network, target_network, optimizer, replay_buffer, epsilon, gamma, batch_size):
    state = torch.tensor([[cart_position, cart_velocity, pole_angle, pole_angular_velocity]], dtype=torch.float32)
    action = choose_action(state, epsilon)
    next_state, reward, done, _ = env.step(action.item())
    next_state = torch.tensor([[next_state[0], next_state[1], next_state[2], next_state[3]]], dtype=torch.float32)
    reward = torch.tensor([[reward]], dtype=torch.float32)
    replay_buffer.push(state, action, reward, next_state, done)
    train(q_network, target_network, optimizer, replay_buffer, batch_size, gamma)
    if done:
        update_target_network(q_network, target_network)
    return action.item()
