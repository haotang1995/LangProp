import numpy as np


def solve_cartpole(cart_position, cart_velocity, pole_angle, pole_angular_velocity) -> int:
    # Define the system parameters
    cart_threshold = 2.5
    pole_threshold = 12 * 2 * np.pi / 360
    max_force = 10.0
    kp = 200
    ki = 300
    kd = 20

    # Compute the errors for P, I, and D control inputs
    err = pole_angle
    err_sum = np.clip(err + ki * 0.01, -100, 100)
    err_diff = pole_angular_velocity

    # Compute the control output
    output = kp * err + ki * err_sum + kd * err_diff

    # Scale the output by the maximum force
    output = np.clip(output, -max_force, max_force) / max_force

    # Convert the scaled output to an integer action
    action = int(np.sign(output) >= 0)

    # Check if the cart is on the left or right of the threshold
    if cart_position < -cart_threshold:
        action = 0
    elif cart_position > cart_threshold:
        action = 1

    # Check if the pole has fallen past the threshold
    if abs(pole_angle) > pole_threshold:
        action = 0

    return action
