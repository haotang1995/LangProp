import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import random

class DQN(nn.Module):
    def __init__(self, state_dim, action_dim, hidden_dim):
        super(DQN, self).__init__()
        self.fc1 = nn.Linear(state_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, hidden_dim)
        self.fc3 = nn.Linear(hidden_dim, action_dim)
        
    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

class ReplayBuffer:
    def __init__(self, capacity):
        self.buffer = []
        self.capacity = capacity
        
    def push(self, state, action, next_state, reward, done):
        if len(self.buffer) >= self.capacity:
            self.buffer.pop(0)
        self.buffer.append((state, action, next_state, reward, done))
        
    def sample_batch(self, batch_size):
        batch = random.sample(self.buffer, batch_size)
        state, action, next_state, reward, done = map(np.stack, zip(*batch))
        state = torch.FloatTensor(state)
        action = torch.LongTensor(action)
        next_state = torch.FloatTensor(next_state)
        reward = torch.FloatTensor(reward)
        done = torch.FloatTensor(done)
        return state, action, next_state, reward, done
        
    def __len__(self):
        return len(self.buffer)

def compute_loss(q_values, target_q_values):
    return nn.functional.smooth_l1_loss(q_values, target_q_values)

def train_dqn(env, dqn, target_dqn, buffer, optimizer, batch_size, gamma, epsilon, epsilon_min, epsilon_decay, target_update_freq):
    state = env.reset()
    episode_reward = 0
    for step in range(1, env.spec.max_episode_steps + 1):
        with torch.no_grad():
            q_values = dqn(torch.FloatTensor(state)).detach()
            action = np.argmax(q_values.numpy())
            if np.random.rand() < epsilon:
                action = env.action_space.sample()
        next_state, reward, done, _ = env.step(action)
        episode_reward += reward
        buffer.push(state, action, next_state, reward, done)
        state = next_state
        if len(buffer) >= batch_size:
            state_batch, action_batch, next_state_batch, reward_batch, done_batch = buffer.sample_batch(batch_size)
            with torch.no_grad():
                next_q_values = target_dqn(next_state_batch)
                target_q_values = reward_batch + gamma * next_q_values.max(dim=1)[0] * (1 - done_batch)
            q_values = dqn(state_batch).gather(dim=1, index=action_batch.unsqueeze(1)).squeeze(1)
            loss = compute_loss(q_values, target_q_values)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            if step % target_update_freq == 0:
                target_dqn.load_state_dict(dqn.state_dict())
        if done:
            break
    epsilon = max(epsilon_min, epsilon * epsilon_decay)
    return episode_reward, epsilon

def solve_cartpole(cart_position, cart_velocity, pole_angle, pole_angular_velocity) -> int:
    # Define the hyperparameters
    capacity = 10000
    batch_size = 128
    gamma = 0.99
    learning_rate = 1e-3
    hidden_dim = 128
    epsilon = 1.0
    epsilon_min = 0.01
    epsilon_decay = 0.995
    target_update_freq = 10
    max_episodes = 1000
    
    # Initialize the environment
    env = gym.make('CartPole-v0')
    
    # Initialize the replay buffer and the DQNs
    buffer = ReplayBuffer(capacity)
    state_dim = env.observation_space.shape[0]
    action_dim = env.action_space.n
    dqn = DQN(state_dim, action_dim, hidden_dim)
    target_dqn = DQN(state_dim, action_dim, hidden_dim)
    target_dqn.load_state_dict(dqn.state_dict())
    
    # Initialize the optimizer
    optimizer = optim.Adam(dqn.parameters(), lr=learning_rate)
    
    # Train the DQN
    for episode in range(1, max_episodes + 1):
        episode_reward, epsilon = train_dqn(env, dqn, target_dqn, buffer, optimizer, batch_size, gamma, epsilon, epsilon_min, epsilon_decay, target_update_freq)
        if episode % 100 == 0:
            print('Episode: {}, Epsilon: {:.2f}, Reward: {}'.format(episode, epsilon, episode_reward))
    
    # Test the DQN
    state = torch.FloatTensor([cart_position, cart_velocity, pole_angle, pole_angular_velocity])
    with torch.no_grad():
        q_values = dqn(state).detach()
        action = np.argmax(q_values.numpy())
        
    return action
