import numpy as np

def find_empty(sudoku):
    for i in range(len(sudoku)):
        for j in range(len(sudoku[0])):
            if sudoku[i][j] == 0:
                return (i, j)  # row, col
    return None

def is_valid(sudoku, num, pos):
    # Check row
    for i in range(len(sudoku[0])):
        if sudoku[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(sudoku)):
        if sudoku[i][pos[1]] == num and pos[0] != i:
            return False

    # Check 3x3 box
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y*3, box_y*3 + 3):
        for j in range(box_x * 3, box_x*3 + 3):
            if sudoku[i][j] == num and (i,j) != pos:
                return False

    return True


def solve_sudoku(sudoku: np.ndarray, width: int, height: int) -> np.ndarray:
    find = find_empty(sudoku)
    if not find:
        return sudoku
    else:
        row, col = find

    for i in range(1, width*height + 1):
        if is_valid(sudoku, i, (row, col)):
            sudoku[row][col] = i

            if solve_sudoku(sudoku, width, height) is not None:
                return sudoku

            sudoku[row][col] = 0

    return None
